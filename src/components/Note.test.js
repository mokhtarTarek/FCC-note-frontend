import React from "react";
import "@testing-library/jest-dom/extend-expect";
import { render,fireEvent } from "@testing-library/react";
//import { prettyDOM } from "@testing-library/dom";
import Note from "./Note";

/*render() method is provided by react testing library to render
components outside the DOM and returns an object that has several
properties.
One of the properties is called container,and it contains all of 
the HTML rendered by the component.
*/
test("renders content", () => {
  const note = {
    content: "Component testing is done with react-testing-library",
    important: true,
  };

  //render Note component:

  const component = render(<Note note={note} />);

  //component.debug(); //to see the html generated by the compo in th console

//   const li = component.container.querySelector("li");
//   console.log(prettyDOM(li))

  //method 1
  expect(component.container).toHaveTextContent(
    "Component testing is done with react-testing-library"
  );

  //method 2
  const element = component.getByText(
    "Component testing is done with react-testing-library"
  );
  expect(element).toBeDefined();

  //method 3
  const div = component.container.querySelector(".note");
  expect(div).toHaveTextContent(
    "Component testing is done with react-testing-library"
  );
});

test('clicking the button calls event handler once', () => {
    const note = {
      content: 'Component testing is done with react-testing-library',
      important: true
    }

  //define the event handler is mock function defined with jest
    const mockHandler = jest.fn()
  //define the component to be tested
    const component = render(
      <Note note={note} toggleImportance={mockHandler} />
    )
  //find the button based on the text       
    const button = component.getByText('make not important')
  //click the button  
    fireEvent.click(button)
  
  //the mock function must be called once  
    expect(mockHandler.mock.calls).toHaveLength(1)
  })